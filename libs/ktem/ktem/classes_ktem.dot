digraph "classes_ktem" {
rankdir=BT
charset="utf-8"
"ktem.reasoning.simple.AddQueryContextPipeline" [color="black", fontcolor="black", label=<{AddQueryContextPipeline|llm<br ALIGN="LEFT"/>n_last_interactions : int<br ALIGN="LEFT"/>|run(question: str, history: list): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.main.App" [color="black", fontcolor="black", label=<{App|chat_page<br ALIGN="LEFT"/>help_page<br ALIGN="LEFT"/>login_page<br ALIGN="LEFT"/>resources_page<br ALIGN="LEFT"/>settings_page<br ALIGN="LEFT"/>setup_page<br ALIGN="LEFT"/>setup_page_wrapper<br ALIGN="LEFT"/>tabs<br ALIGN="LEFT"/>|on_subscribe_public_events()<br ALIGN="LEFT"/>ui()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.embeddings.db.Base" [color="black", fontcolor="black", label=<{Base|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.llms.db.Base" [color="black", fontcolor="black", label=<{Base|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.rerankings.db.Base" [color="black", fontcolor="black", label=<{Base|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.app.BaseApp" [color="black", fontcolor="black", label=<{BaseApp|app<br ALIGN="LEFT"/>app_name<br ALIGN="LEFT"/>app_version<br ALIGN="LEFT"/>default_settings<br ALIGN="LEFT"/>dev_mode<br ALIGN="LEFT"/>exman<br ALIGN="LEFT"/>f_user_management<br ALIGN="LEFT"/>index_manager<br ALIGN="LEFT"/>public_events : list[str]<br ALIGN="LEFT"/>settings_state<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|declare_event(name: str)<br ALIGN="LEFT"/>declare_public_events()<br ALIGN="LEFT"/>get_event(name): list[dict]<br ALIGN="LEFT"/>initialize_indices()<br ALIGN="LEFT"/>make()<br ALIGN="LEFT"/>on_app_created()<br ALIGN="LEFT"/><I>on_register_events</I>()<br ALIGN="LEFT"/><I>on_subscribe_public_events</I>()<br ALIGN="LEFT"/>register_events()<br ALIGN="LEFT"/>register_extensions()<br ALIGN="LEFT"/>register_reasonings()<br ALIGN="LEFT"/>subscribe_event(name: str, definition: dict)<br ALIGN="LEFT"/>subscribe_public_events()<br ALIGN="LEFT"/><I>ui</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.base_models.BaseConversation" [color="black", fontcolor="black", label=<{BaseConversation|data_source : dict<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>is_public : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>user : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.embeddings.db.BaseEmbeddingTable" [color="black", fontcolor="black", label=<{BaseEmbeddingTable|default<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.base.BaseFileIndexIndexing" [color="black", fontcolor="black", label=<{BaseFileIndexIndexing|DS<br ALIGN="LEFT"/>FSPath<br ALIGN="LEFT"/>Index<br ALIGN="LEFT"/>Source<br ALIGN="LEFT"/>VS<br ALIGN="LEFT"/>chunk_overlap<br ALIGN="LEFT"/>chunk_size<br ALIGN="LEFT"/>private<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|copy_to_filestorage(file_paths: str \| Path \| list[str \| Path]): list[str]<br ALIGN="LEFT"/><I>get_filestorage_path</I>(rel_paths: str \| list[str]): list[str]<br ALIGN="LEFT"/><I>get_pipeline</I>(user_settings: dict, index_settings: dict): 'BaseFileIndexIndexing'<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/><I>rebuild_index</I>()<br ALIGN="LEFT"/><I>run</I>(file_paths: str \| Path \| list[str \| Path]): tuple[list[str \| None], list[str \| None]]<br ALIGN="LEFT"/><I>stream</I>(file_paths: str \| Path \| list[str \| Path]): Generator[Document, None, tuple[list[str \| None], list[str \| None], list[Document]]]<br ALIGN="LEFT"/>warning(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.base.BaseFileIndexRetriever" [color="black", fontcolor="black", label=<{BaseFileIndexRetriever|DS<br ALIGN="LEFT"/>FSPath<br ALIGN="LEFT"/>Index<br ALIGN="LEFT"/>Source<br ALIGN="LEFT"/>VS<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|<I>get_pipeline</I>(user_settings: dict, index_settings: dict, selected: Optional[list]): 'BaseFileIndexRetriever'<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.base.BaseIndex" [color="black", fontcolor="black", label=<{BaseIndex|config<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|get_admin_settings(): dict<br ALIGN="LEFT"/>get_index_page_ui(): Optional['BasePage']<br ALIGN="LEFT"/><I>get_indexing_pipeline</I>(settings: dict, user_id: Optional[int]): 'BaseComponent'<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseComponent']<br ALIGN="LEFT"/>get_selector_component_ui(): Optional['BasePage']<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/><I>on_create</I>()<br ALIGN="LEFT"/><I>on_delete</I>()<br ALIGN="LEFT"/><I>on_start</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.base_models.BaseIssueReport" [color="black", fontcolor="black", label=<{BaseIssueReport|chat : Optional[dict]<br ALIGN="LEFT"/>id : Optional[int]<br ALIGN="LEFT"/>issues : dict<br ALIGN="LEFT"/>settings : Optional[dict]<br ALIGN="LEFT"/>user : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.llms.db.BaseLLMTable" [color="black", fontcolor="black", label=<{BaseLLMTable|default<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.app.BasePage" [color="black", fontcolor="black", label=<{BasePage|public_events : list[str]<br ALIGN="LEFT"/>|as_gradio_component(): Optional[gr.components.Component \| list[gr.components.Component]]<br ALIGN="LEFT"/>declare_public_events()<br ALIGN="LEFT"/>on_app_created()<br ALIGN="LEFT"/><I>on_building_ui</I>()<br ALIGN="LEFT"/><I>on_register_events</I>()<br ALIGN="LEFT"/><I>on_subscribe_public_events</I>()<br ALIGN="LEFT"/>register_events()<br ALIGN="LEFT"/>render()<br ALIGN="LEFT"/>subscribe_public_events()<br ALIGN="LEFT"/>unrender()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.base.BaseReasoning" [color="black", fontcolor="black", label=<{BaseReasoning|<br ALIGN="LEFT"/>|<I>get_info</I>(): dict<br ALIGN="LEFT"/>get_pipeline(user_settings: dict, state: dict, retrievers: Optional[list['BaseComponent']]): 'BaseReasoning'<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/><I>run</I>(message: str, conv_id: str, history: list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.rerankings.db.BaseRerankingTable" [color="black", fontcolor="black", label=<{BaseRerankingTable|default<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.settings.BaseSettingGroup" [color="black", fontcolor="black", label=<{BaseSettingGroup|options : dict[str, 'BaseSettingGroup']<br ALIGN="LEFT"/>settings : dict[str, 'SettingItem']<br ALIGN="LEFT"/>|<I>finalize</I>()<br ALIGN="LEFT"/>flatten(): dict<br ALIGN="LEFT"/>get_setting_item(path: str): SettingItem<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.base_models.BaseSettings" [color="black", fontcolor="black", label=<{BaseSettings|id : str<br ALIGN="LEFT"/>setting : dict<br ALIGN="LEFT"/>user : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.db.base_models.BaseUser" [color="black", fontcolor="black", label=<{BaseUser|admin : bool<br ALIGN="LEFT"/>id : Optional[int]<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>username_lower : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.pages.chat.ChatPage" [color="black", fontcolor="black", label=<{ChatPage|chat_control<br ALIGN="LEFT"/>chat_panel<br ALIGN="LEFT"/>citation<br ALIGN="LEFT"/>conv_column<br ALIGN="LEFT"/>first_indexing_url_fn : NoneType<br ALIGN="LEFT"/>first_selector_choices<br ALIGN="LEFT"/>followup_questions<br ALIGN="LEFT"/>followup_questions_ui<br ALIGN="LEFT"/>info_column<br ALIGN="LEFT"/>info_panel<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>modal<br ALIGN="LEFT"/>model_type<br ALIGN="LEFT"/>plot_panel<br ALIGN="LEFT"/>quick_file_upload<br ALIGN="LEFT"/>quick_file_upload_status<br ALIGN="LEFT"/>quick_urls<br ALIGN="LEFT"/>reasoning_type<br ALIGN="LEFT"/>report_issue<br ALIGN="LEFT"/>state_chat<br ALIGN="LEFT"/>state_plot_history<br ALIGN="LEFT"/>state_plot_panel<br ALIGN="LEFT"/>state_retrieval_history<br ALIGN="LEFT"/>use_chat_suggestion<br ALIGN="LEFT"/>use_mindmap<br ALIGN="LEFT"/>use_mindmap_check<br ALIGN="LEFT"/>|chat_fn(conversation_id, chat_history, settings, reasoning_type, llm_type, use_mind_map, use_citation, language, chat_state, command_state, user_id)<br ALIGN="LEFT"/>check_and_suggest_name_conv(chat_history)<br ALIGN="LEFT"/>create_pipeline(settings: dict, session_reasoning_type: str, session_llm: str, session_use_mindmap: bool \| str, session_use_citation: str, session_language: str, state: dict, command_state: str \| None, user_id: int)<br ALIGN="LEFT"/>is_liked(convo_id, liked: gr.LikeData)<br ALIGN="LEFT"/>message_selected(retrieval_history, plot_history, msg: gr.SelectData)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_set_public_conversation(is_public, convo_id)<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>persist_data_source(convo_id, user_id, retrieval_msg, plot_data, retrival_history, plot_history, messages, state)<br ALIGN="LEFT"/>reasoning_changed(reasoning_type)<br ALIGN="LEFT"/>submit_msg(chat_input, chat_history, user_id, settings, conv_id, conv_name, first_selector_choices)<br ALIGN="LEFT"/>suggest_chat_conv(settings, chat_history, use_suggestion)<br ALIGN="LEFT"/>toggle_delete(conv_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.chat.chat_panel.ChatPanel" [color="black", fontcolor="black", label=<{ChatPanel|chatbot<br ALIGN="LEFT"/>text_input<br ALIGN="LEFT"/>|on_building_ui()<br ALIGN="LEFT"/>submit_msg(chat_input, chat_history)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.chat.chat_suggestion.ChatSuggestion" [color="black", fontcolor="black", label=<{ChatSuggestion|accordion<br ALIGN="LEFT"/>chat_samples<br ALIGN="LEFT"/>examples<br ALIGN="LEFT"/>|as_gradio_component()<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>select_example(ev: gr.SelectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.react.ReactAgentPipeline.Config" [color="black", fontcolor="black", label=<{Config|allow_extra : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.rewoo.RewooAgentPipeline.Config" [color="black", fontcolor="black", label=<{Config|allow_extra : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.simple.FullQAPipeline.Config" [color="black", fontcolor="black", label=<{Config|allow_extra : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.db.models.Conversation" [color="black", fontcolor="black", label=<{Conversation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.pages.chat.control.ConversationControl" [color="black", fontcolor="black", label=<{ConversationControl|btn_chat_expand<br ALIGN="LEFT"/>btn_conversation_rn<br ALIGN="LEFT"/>btn_del<br ALIGN="LEFT"/>btn_del_cnl<br ALIGN="LEFT"/>btn_del_conf<br ALIGN="LEFT"/>btn_info_expand<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>btn_toggle_dark_mode<br ALIGN="LEFT"/>cb_is_public<br ALIGN="LEFT"/>chat_suggestion<br ALIGN="LEFT"/>conversation<br ALIGN="LEFT"/>conversation_id<br ALIGN="LEFT"/>conversation_rn<br ALIGN="LEFT"/>|delete_conv(conversation_id, user_id)<br ALIGN="LEFT"/>load_chat_history(user_id)<br ALIGN="LEFT"/>new_conv(user_id)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>persist_chat_suggestions(conversation_id, new_suggestions, is_updated, user_id)<br ALIGN="LEFT"/>reload_conv(user_id)<br ALIGN="LEFT"/>rename_conv(conversation_id, new_name, is_renamed, user_id)<br ALIGN="LEFT"/>select_conv(conversation_id, user_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.visualize_cited.CreateCitationVizPipeline" [color="black", fontcolor="black", label=<{CreateCitationVizPipeline|embedding<br ALIGN="LEFT"/>projector<br ALIGN="LEFT"/>|run(context: List[str], question: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.mindmap.CreateMindmapPipeline" [color="black", fontcolor="black", label=<{CreateMindmapPipeline|MINDMAP_PROMPT_TEMPLATE : str<br ALIGN="LEFT"/>SYSTEM_PROMPT : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>prompt_template : str<br ALIGN="LEFT"/>|run(question: str, context: str): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.decompose_question.DecomposeQuestionPipeline" [color="black", fontcolor="black", label=<{DecomposeQuestionPipeline|DECOMPOSE_SYSTEM_PROMPT_TEMPLATE : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>prompt_template : str<br ALIGN="LEFT"/>|create_prompt(question)<br ALIGN="LEFT"/>run(question: str): list<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.ui.DirectoryUpload" [color="black", fontcolor="black", label=<{DirectoryUpload|path<br ALIGN="LEFT"/>reindex<br ALIGN="LEFT"/>upload_button<br ALIGN="LEFT"/>|on_building_ui()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.react.DocSearchArgs" [color="black", fontcolor="black", label=<{DocSearchArgs|query : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.rewoo.DocSearchArgs" [color="black", fontcolor="black", label=<{DocSearchArgs|query : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.react.DocSearchTool" [color="black", fontcolor="black", label=<{DocSearchTool|args_schema : Optional[Type[BaseModel]]<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>retrievers : list[BaseComponent]<br ALIGN="LEFT"/>|prepare_evidence(docs, trim_len: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.rewoo.DocSearchTool" [color="black", fontcolor="black", label=<{DocSearchTool|args_schema : Optional[Type[BaseModel]]<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>retrievers : list[BaseComponent]<br ALIGN="LEFT"/>|prepare_evidence(docs, trim_len: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.pipelines.DocumentRetrievalPipeline" [color="black", fontcolor="black", label=<{DocumentRetrievalPipeline|DS<br ALIGN="LEFT"/>FSPath<br ALIGN="LEFT"/>Index : IndexTable<br ALIGN="LEFT"/>Source : Source<br ALIGN="LEFT"/>VS<br ALIGN="LEFT"/>embedding<br ALIGN="LEFT"/>get_extra_table : bool<br ALIGN="LEFT"/>llm_scorer : LLMReranking \| None<br ALIGN="LEFT"/>mmr : bool<br ALIGN="LEFT"/>rerankers : Sequence[BaseReranking]<br ALIGN="LEFT"/>retrieval_mode : str<br ALIGN="LEFT"/>top_k : int<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|generate_relevant_scores(query: str, documents: list[RetrievedDocument]): list[RetrievedDocument]<br ALIGN="LEFT"/>get_pipeline(user_settings, index_settings, selected)<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>run(text: str, doc_ids: Optional[list[str]]): list[RetrievedDocument]<br ALIGN="LEFT"/>vector_retrieval(): VectorRetrieval<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.embeddings.ui.EmbeddingManagement" [color="black", fontcolor="black", label=<{EmbeddingManagement|btn_close<br ALIGN="LEFT"/>btn_delete<br ALIGN="LEFT"/>btn_delete_no<br ALIGN="LEFT"/>btn_delete_yes<br ALIGN="LEFT"/>btn_edit_save<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>btn_test_connection<br ALIGN="LEFT"/>connection_logs<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>edit_default<br ALIGN="LEFT"/>edit_spec<br ALIGN="LEFT"/>edit_spec_desc<br ALIGN="LEFT"/>emb_choices<br ALIGN="LEFT"/>emb_list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>selected_emb_name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>spec_desc<br ALIGN="LEFT"/>spec_desc_default : str<br ALIGN="LEFT"/>|check_connection(selected_emb_name, selected_spec)<br ALIGN="LEFT"/>create_emb(name, choices, spec, default)<br ALIGN="LEFT"/>delete_emb(selected_emb_name)<br ALIGN="LEFT"/>list_embeddings()<br ALIGN="LEFT"/>on_btn_delete_click()<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_emb_vendor_change(vendor)<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_selected_emb_change(selected_emb_name)<br ALIGN="LEFT"/>save_emb(selected_emb_name, default, spec)<br ALIGN="LEFT"/>select_emb(emb_list, ev: gr.SelectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.embeddings.manager.EmbeddingManager" [color="black", fontcolor="black", label=<{EmbeddingManager|<br ALIGN="LEFT"/>|add(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>delete(name: str)<br ALIGN="LEFT"/>get(key: str, default: Optional[BaseEmbeddings]): Optional[BaseEmbeddings]<br ALIGN="LEFT"/>get_default(): BaseEmbeddings<br ALIGN="LEFT"/>get_default_name(): str<br ALIGN="LEFT"/>get_random(): BaseEmbeddings<br ALIGN="LEFT"/>get_random_name(): str<br ALIGN="LEFT"/>info(): dict<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>load_vendors()<br ALIGN="LEFT"/>options(): dict<br ALIGN="LEFT"/>settings(): dict<br ALIGN="LEFT"/>update(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>vendors(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.embeddings.db.EmbeddingTable" [color="black", fontcolor="black", label=<{EmbeddingTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.fewshot_rewrite_question.FewshotRewriteQuestionPipeline" [color="black", fontcolor="black", label=<{FewshotRewriteQuestionPipeline|doc_store<br ALIGN="LEFT"/>embedding<br ALIGN="LEFT"/>k : int<br ALIGN="LEFT"/>lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>rewrite_template : str<br ALIGN="LEFT"/>vector_store<br ALIGN="LEFT"/>|add_documents(examples, batch_size: int)<br ALIGN="LEFT"/>get_pipeline(embedding, example_path, collection_name: str)<br ALIGN="LEFT"/>run(question: str): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.ui.File" [color="black", fontcolor="black", label=<{File|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.exceptions.FileExistsError" [color="black", fontcolor="red", label=<{FileExistsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.index.FileIndex" [color="black", fontcolor="black", label=<{FileIndex|config : dict<br ALIGN="LEFT"/>|get_admin_settings()<br ALIGN="LEFT"/>get_index_page_ui()<br ALIGN="LEFT"/>get_indexing_pipeline(settings, user_id): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseFileIndexRetriever']<br ALIGN="LEFT"/>get_selector_component_ui()<br ALIGN="LEFT"/>get_user_settings()<br ALIGN="LEFT"/>on_create()<br ALIGN="LEFT"/>on_delete()<br ALIGN="LEFT"/>on_start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.ui.FileIndexPage" [color="black", fontcolor="black", label=<{FileIndexPage|btn_close_upload_progress_panel<br ALIGN="LEFT"/>chat_button<br ALIGN="LEFT"/>chunks<br ALIGN="LEFT"/>delete_all_button<br ALIGN="LEFT"/>delete_all_button_cancel<br ALIGN="LEFT"/>delete_all_button_confirm<br ALIGN="LEFT"/>delete_button<br ALIGN="LEFT"/>deselect_button<br ALIGN="LEFT"/>download_all_button<br ALIGN="LEFT"/>download_single_button<br ALIGN="LEFT"/>file_list<br ALIGN="LEFT"/>file_list_state<br ALIGN="LEFT"/>files<br ALIGN="LEFT"/>filter<br ALIGN="LEFT"/>group_add_button<br ALIGN="LEFT"/>group_chat_button<br ALIGN="LEFT"/>group_close_button<br ALIGN="LEFT"/>group_delete_button<br ALIGN="LEFT"/>group_files<br ALIGN="LEFT"/>group_label<br ALIGN="LEFT"/>group_list<br ALIGN="LEFT"/>group_list_state<br ALIGN="LEFT"/>group_name<br ALIGN="LEFT"/>group_save_button<br ALIGN="LEFT"/>is_zipped_state<br ALIGN="LEFT"/>public_events : list<br ALIGN="LEFT"/>quick_upload_state<br ALIGN="LEFT"/>reindex<br ALIGN="LEFT"/>selected_file_id<br ALIGN="LEFT"/>selected_panel<br ALIGN="LEFT"/>selected_panel_false : str<br ALIGN="LEFT"/>selected_panel_true : str<br ALIGN="LEFT"/>selection_info<br ALIGN="LEFT"/>upload<br ALIGN="LEFT"/>upload_button<br ALIGN="LEFT"/>upload_info<br ALIGN="LEFT"/>upload_progress_panel<br ALIGN="LEFT"/>upload_result<br ALIGN="LEFT"/>urls<br ALIGN="LEFT"/>|delete_all_files(file_list)<br ALIGN="LEFT"/>delete_event(file_id)<br ALIGN="LEFT"/>delete_group(group_name)<br ALIGN="LEFT"/>delete_no_event()<br ALIGN="LEFT"/>download_all_files()<br ALIGN="LEFT"/>download_single_file(is_zipped_state, file_id)<br ALIGN="LEFT"/>file_selected(file_id)<br ALIGN="LEFT"/>format_size_human_readable(num: float \| str, suffix)<br ALIGN="LEFT"/>index_files_from_dir(folder_path, reindex, settings, user_id): Generator[tuple[str, str], None, None]<br ALIGN="LEFT"/>index_fn(files, urls, reindex: bool, settings, user_id): Generator[tuple[str, str], None, None]<br ALIGN="LEFT"/>index_fn_file_with_default_loaders(files, reindex: bool, settings, user_id): list['str']<br ALIGN="LEFT"/>index_fn_url_with_default_loaders(urls, reindex: bool, settings, user_id)<br ALIGN="LEFT"/>interact_file_list(list_files, ev: gr.SelectData)<br ALIGN="LEFT"/>interact_group_list(list_groups, ev: gr.SelectData)<br ALIGN="LEFT"/>list_file(user_id, name_pattern)<br ALIGN="LEFT"/>list_file_names(file_list_state)<br ALIGN="LEFT"/>list_group(user_id, file_list)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>render_file_list()<br ALIGN="LEFT"/>render_group_list()<br ALIGN="LEFT"/>save_group(group_name, group_files, user_id)<br ALIGN="LEFT"/>set_file_id_selector(selected_file_id)<br ALIGN="LEFT"/>set_group_id_selector(selected_group_name)<br ALIGN="LEFT"/>show_delete_all_confirm(file_list)<br ALIGN="LEFT"/>upload_instruction(): str<br ALIGN="LEFT"/>validate(files: list[str])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.ui.FileSelector" [color="black", fontcolor="black", label=<{FileSelector|mode<br ALIGN="LEFT"/>selector<br ALIGN="LEFT"/>selector_choices<br ALIGN="LEFT"/>selector_user_id<br ALIGN="LEFT"/>|as_gradio_component()<br ALIGN="LEFT"/>default()<br ALIGN="LEFT"/>get_selected_ids(components)<br ALIGN="LEFT"/>load_files(selected_files, user_id)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.simple.FullDecomposeQAPipeline" [color="black", fontcolor="black", label=<{FullDecomposeQAPipeline|<br ALIGN="LEFT"/>|answer_sub_questions(messages: list, conv_id: str, history: list)<br ALIGN="LEFT"/>get_info(): dict<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>prepare_pipeline_instance(settings, retrievers)<br ALIGN="LEFT"/>stream(message: str, conv_id: str, history: list): Generator[Document, None, Document]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.simple.FullQAPipeline" [color="black", fontcolor="black", label=<{FullQAPipeline|add_query_context<br ALIGN="LEFT"/>answering_pipeline<br ALIGN="LEFT"/>create_citation_viz_pipeline<br ALIGN="LEFT"/>evidence_pipeline<br ALIGN="LEFT"/>retrievers : list[BaseComponent]<br ALIGN="LEFT"/>rewrite_pipeline : RewriteQuestionPipeline \| None<br ALIGN="LEFT"/>trigger_context : int<br ALIGN="LEFT"/>use_rewrite : bool<br ALIGN="LEFT"/>|<I>ainvoke</I>(message: str, conv_id: str, history: list): Document<br ALIGN="LEFT"/>get_info(): dict<br ALIGN="LEFT"/>get_pipeline(settings, states, retrievers)<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>prepare_citation_viz(answer, question, docs): Document \| None<br ALIGN="LEFT"/>prepare_mindmap(answer): Document \| None<br ALIGN="LEFT"/>prepare_pipeline_instance(settings, retrievers)<br ALIGN="LEFT"/>retrieve(message: str, history: list): tuple[list[RetrievedDocument], list[Document]]<br ALIGN="LEFT"/>show_citations_and_addons(answer, docs, question)<br ALIGN="LEFT"/>stream(message: str, conv_id: str, history: list): Generator[Document, None, Document]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.generator.Generator" [color="black", fontcolor="black", label=<{Generator|gen<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.graph.graph_index.GraphRAGIndex" [color="black", fontcolor="black", label=<{GraphRAGIndex|<br ALIGN="LEFT"/>|get_indexing_pipeline(settings, user_id): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseFileIndexRetriever']<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.pipelines.GraphRAGIndexingPipeline" [color="black", fontcolor="black", label=<{GraphRAGIndexingPipeline|<br ALIGN="LEFT"/>|call_graphrag_index(graph_id: str, all_docs: list[Document])<br ALIGN="LEFT"/>route(file_path: str \| Path): IndexPipeline<br ALIGN="LEFT"/>store_file_id_with_graph_id(file_ids: list[str \| None])<br ALIGN="LEFT"/>stream(file_paths: str \| Path \| list[str \| Path], reindex: bool): Generator[Document, None, tuple[list[str \| None], list[str \| None], list[Document]]]<br ALIGN="LEFT"/>write_docs_to_files(graph_id: str, docs: list[Document])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.pipelines.GraphRAGRetrieverPipeline" [color="black", fontcolor="black", label=<{GraphRAGRetrieverPipeline|Index<br ALIGN="LEFT"/>file_ids : list[str]<br ALIGN="LEFT"/>|format_context_records(context_records): list[RetrievedDocument]<br ALIGN="LEFT"/>generate_relevant_scores(text, documents: list[RetrievedDocument])<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>plot_graph(context_records)<br ALIGN="LEFT"/>run(text: str): list[RetrievedDocument]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.help.HelpPage" [color="black", fontcolor="black", label=<{HelpPage|app_version : str \| None<br ALIGN="LEFT"/>changelogs_cache_dir : Path<br ALIGN="LEFT"/>doc_dir : Path<br ALIGN="LEFT"/>remote_content_url : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.exceptions.HookAlreadyDeclared" [color="black", fontcolor="red", label=<{HookAlreadyDeclared|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.exceptions.HookNotDeclared" [color="black", fontcolor="red", label=<{HookNotDeclared|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.models.Index" [color="black", fontcolor="black", label=<{Index|config : dict<br ALIGN="LEFT"/>id : Optional[int]<br ALIGN="LEFT"/>index_type : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.pipelines.IndexDocumentPipeline" [color="black", fontcolor="black", label=<{IndexDocumentPipeline|DS<br ALIGN="LEFT"/>FSPath<br ALIGN="LEFT"/>Index : IndexTable<br ALIGN="LEFT"/>Source : Source<br ALIGN="LEFT"/>VS<br ALIGN="LEFT"/>chunk_overlap<br ALIGN="LEFT"/>chunk_size<br ALIGN="LEFT"/>embedding<br ALIGN="LEFT"/>private<br ALIGN="LEFT"/>reader_mode : str<br ALIGN="LEFT"/>run_embedding_in_thread : bool<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|get_pipeline(user_settings, index_settings): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_user_settings()<br ALIGN="LEFT"/>is_url(file_path: str \| Path): bool<br ALIGN="LEFT"/>readers()<br ALIGN="LEFT"/>route(file_path: str \| Path): IndexPipeline<br ALIGN="LEFT"/><I>run</I>(file_paths: str \| Path \| list[str \| Path]): tuple[list[str \| None], list[str \| None]]<br ALIGN="LEFT"/>stream(file_paths: str \| Path \| list[str \| Path], reindex: bool): Generator[Document, None, tuple[list[str \| None], list[str \| None], list[Document]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.ui.IndexManagement" [color="black", fontcolor="black", label=<{IndexManagement|btn_close<br ALIGN="LEFT"/>btn_delete<br ALIGN="LEFT"/>btn_delete_no<br ALIGN="LEFT"/>btn_delete_yes<br ALIGN="LEFT"/>btn_edit_save<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>edit_name<br ALIGN="LEFT"/>edit_spec<br ALIGN="LEFT"/>edit_spec_desc<br ALIGN="LEFT"/>index_list<br ALIGN="LEFT"/>index_type<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>selected_index_id<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>spec_desc<br ALIGN="LEFT"/>spec_desc_default : str<br ALIGN="LEFT"/>|create_index(name: str, index_type: str, config: str)<br ALIGN="LEFT"/>delete_index(selected_index_id)<br ALIGN="LEFT"/>list_indices()<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_index_type_change(index_type: str)<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_selected_index_change(selected_index_id: int)<br ALIGN="LEFT"/>select_index(index_list, ev: gr.SelectData): int<br ALIGN="LEFT"/>update_index(selected_index_id: int, name: str, config: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.manager.IndexManager" [color="black", fontcolor="black", label=<{IndexManager|index_types<br ALIGN="LEFT"/>indices<br ALIGN="LEFT"/>|build_index(name: str, config: dict, index_type: str)<br ALIGN="LEFT"/>delete_index(id: int)<br ALIGN="LEFT"/>exists(id: Optional[int], name: Optional[str]): bool<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/>load_index_types()<br ALIGN="LEFT"/>on_application_startup()<br ALIGN="LEFT"/>start_index(id: int, name: str, config: dict, index_type: str)<br ALIGN="LEFT"/>update_index(id: int, name: str, config: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.pipelines.IndexPipeline" [color="black", fontcolor="black", label=<{IndexPipeline|DS<br ALIGN="LEFT"/>FSPath<br ALIGN="LEFT"/>Index<br ALIGN="LEFT"/>Source<br ALIGN="LEFT"/>VS<br ALIGN="LEFT"/>chunk_batch_size : int<br ALIGN="LEFT"/>collection_name : str<br ALIGN="LEFT"/>embedding<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>private : bool<br ALIGN="LEFT"/>run_embedding_in_thread : bool<br ALIGN="LEFT"/>splitter : BaseSplitter \| None<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|delete_file(file_id: str)<br ALIGN="LEFT"/>finish(file_id: str, file_path: str \| Path): str<br ALIGN="LEFT"/>get_id_if_exists(file_path: str \| Path): Optional[str]<br ALIGN="LEFT"/>get_token_func()<br ALIGN="LEFT"/>handle_chunks_docstore(chunks, file_id)<br ALIGN="LEFT"/>handle_chunks_vectorstore(chunks, file_id)<br ALIGN="LEFT"/>handle_docs(docs, file_id, file_name): Generator[Document, None, int]<br ALIGN="LEFT"/><I>run</I>(file_path: str \| Path, reindex: bool): tuple[str, list[Document]]<br ALIGN="LEFT"/>store_file(file_path: Path): str<br ALIGN="LEFT"/>store_url(url: str): str<br ALIGN="LEFT"/>stream(file_path: str \| Path, reindex: bool): Generator[Document, None, tuple[str, list[Document]]]<br ALIGN="LEFT"/>vector_indexing(): VectorIndexing<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.models.IssueReport" [color="black", fontcolor="black", label=<{IssueReport|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.exceptions.KHException" [color="black", fontcolor="red", label=<{KHException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.knet.pipelines.KnetIndexingPipeline" [color="black", fontcolor="black", label=<{KnetIndexingPipeline|collection_name : str<br ALIGN="LEFT"/>|get_user_settings()<br ALIGN="LEFT"/>route(file_path: str \| Path): IndexPipeline<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.knet.pipelines.KnetRetrievalPipeline" [color="black", fontcolor="black", label=<{KnetRetrievalPipeline|DEFAULT_KNET_ENDPOINT : str<br ALIGN="LEFT"/>collection_name : str<br ALIGN="LEFT"/>rerankers : Sequence[BaseReranking]<br ALIGN="LEFT"/>|encode_image_base64(image_path: str \| Path): bytes \| str<br ALIGN="LEFT"/>get_pipeline(user_settings, index_settings, selected)<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>run(text: str, doc_ids: Optional[list[str]]): list[RetrievedDocument]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.knet.knet_index.KnowledgeNetworkFileIndex" [color="black", fontcolor="black", label=<{KnowledgeNetworkFileIndex|<br ALIGN="LEFT"/>|get_admin_settings()<br ALIGN="LEFT"/>get_indexing_pipeline(settings, user_id): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseFileIndexRetriever']<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.assets.theme.Kotaemon" [color="black", fontcolor="black", label=<{Kotaemon|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.llms.ui.LLMManagement" [color="black", fontcolor="black", label=<{LLMManagement|btn_close<br ALIGN="LEFT"/>btn_delete<br ALIGN="LEFT"/>btn_delete_no<br ALIGN="LEFT"/>btn_delete_yes<br ALIGN="LEFT"/>btn_edit_save<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>btn_test_connection<br ALIGN="LEFT"/>connection_logs<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>edit_default<br ALIGN="LEFT"/>edit_spec<br ALIGN="LEFT"/>edit_spec_desc<br ALIGN="LEFT"/>llm_choices<br ALIGN="LEFT"/>llm_list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>selected_llm_name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>spec_desc<br ALIGN="LEFT"/>spec_desc_default : str<br ALIGN="LEFT"/>|check_connection(selected_llm_name: str, selected_spec)<br ALIGN="LEFT"/>create_llm(name, choices, spec, default)<br ALIGN="LEFT"/>delete_llm(selected_llm_name)<br ALIGN="LEFT"/>list_llms()<br ALIGN="LEFT"/>on_btn_delete_click()<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_llm_vendor_change(vendor)<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_selected_llm_change(selected_llm_name)<br ALIGN="LEFT"/>save_llm(selected_llm_name, default, spec)<br ALIGN="LEFT"/>select_llm(llm_list, ev: gr.SelectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.llms.manager.LLMManager" [color="black", fontcolor="black", label=<{LLMManager|<br ALIGN="LEFT"/>|add(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>delete(name: str)<br ALIGN="LEFT"/>get(key: str, default: None): Optional[ChatLLM]<br ALIGN="LEFT"/>get_default(): ChatLLM<br ALIGN="LEFT"/>get_default_name(): str<br ALIGN="LEFT"/>get_random(): ChatLLM<br ALIGN="LEFT"/>get_random_name(): str<br ALIGN="LEFT"/>info(): dict<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>load_vendors()<br ALIGN="LEFT"/>options(): dict<br ALIGN="LEFT"/>settings(): dict<br ALIGN="LEFT"/>update(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>vendors(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.llms.db.LLMTable" [color="black", fontcolor="black", label=<{LLMTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.index.file.graph.light_graph_index.LightRAGIndex" [color="black", fontcolor="black", label=<{LightRAGIndex|<br ALIGN="LEFT"/>|get_indexing_pipeline(settings, user_id): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseFileIndexRetriever']<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.lightrag_pipelines.LightRAGIndexingPipeline" [color="black", fontcolor="black", label=<{LightRAGIndexingPipeline|prompts : dict[str, str]<br ALIGN="LEFT"/>|call_graphrag_index(graph_id: str, docs: list[Document])<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>stream(file_paths: str \| Path \| list[str \| Path], reindex: bool): Generator[Document, None, tuple[list[str \| None], list[str \| None], list[Document]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.lightrag_pipelines.LightRAGRetrieverPipeline" [color="black", fontcolor="black", label=<{LightRAGRetrieverPipeline|Index<br ALIGN="LEFT"/>file_ids : list[str]<br ALIGN="LEFT"/>search_type : str<br ALIGN="LEFT"/>|format_context_records(entities, relationships, sources): list[RetrievedDocument]<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>plot_graph(relationships)<br ALIGN="LEFT"/>run(text: str): list[RetrievedDocument]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.login.LoginPage" [color="black", fontcolor="black", label=<{LoginPage|btn_login<br ALIGN="LEFT"/>public_events : list<br ALIGN="LEFT"/>pwd<br ALIGN="LEFT"/>usn<br ALIGN="LEFT"/>|login(usn, pwd)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>toggle_login_visibility(user_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.components.ModelPool" [color="black", fontcolor="black", label=<{ModelPool|<br ALIGN="LEFT"/>|get(key: str, default: Optional[BaseComponent]): Optional[BaseComponent]<br ALIGN="LEFT"/>get_default(): BaseComponent<br ALIGN="LEFT"/>get_default_name(): str<br ALIGN="LEFT"/>get_highest_accuracy(): BaseComponent<br ALIGN="LEFT"/>get_highest_accuracy_name(): str<br ALIGN="LEFT"/>get_lowest_cost(): BaseComponent<br ALIGN="LEFT"/>get_lowest_cost_name(): str<br ALIGN="LEFT"/>get_random(): BaseComponent<br ALIGN="LEFT"/>get_random_name(): str<br ALIGN="LEFT"/>options(): dict<br ALIGN="LEFT"/>settings(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.nano_graph_index.NanoGraphRAGIndex" [color="black", fontcolor="black", label=<{NanoGraphRAGIndex|<br ALIGN="LEFT"/>|get_indexing_pipeline(settings, user_id): BaseFileIndexIndexing<br ALIGN="LEFT"/>get_retriever_pipelines(settings: dict, user_id: int, selected: Any): list['BaseFileIndexRetriever']<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.nano_pipelines.NanoGraphRAGIndexingPipeline" [color="black", fontcolor="black", label=<{NanoGraphRAGIndexingPipeline|prompts : dict[str, str]<br ALIGN="LEFT"/>|call_graphrag_index(graph_id: str, docs: list[Document])<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>stream(file_paths: str \| Path \| list[str \| Path], reindex: bool): Generator[Document, None, tuple[list[str \| None], list[str \| None], list[Document]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.index.file.graph.nano_pipelines.NanoGraphRAGRetrieverPipeline" [color="black", fontcolor="black", label=<{NanoGraphRAGRetrieverPipeline|Index<br ALIGN="LEFT"/>file_ids : list[str]<br ALIGN="LEFT"/>search_type : str<br ALIGN="LEFT"/>|format_context_records(entities, relationships, reports, sources): list[RetrievedDocument]<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>plot_graph(relationships)<br ALIGN="LEFT"/>run(text: str): list[RetrievedDocument]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.plantuml.PlantUML" [color="black", fontcolor="black", label=<{PlantUML|HttpLib2Error : HttpLib2Error<br ALIGN="LEFT"/>http : Http<br ALIGN="LEFT"/>request_opts : dict<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>|get_url(plantuml_text)<br ALIGN="LEFT"/>process(plantuml_text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.plantuml.PlantUMLConnectionError" [color="black", fontcolor="red", label=<{PlantUMLConnectionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.utils.plantuml.PlantUMLError" [color="black", fontcolor="red", label=<{PlantUMLError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.utils.plantuml.PlantUMLHTTPError" [color="black", fontcolor="red", label=<{PlantUMLHTTPError|content<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.react.ReactAgentPipeline" [color="black", fontcolor="black", label=<{ReactAgentPipeline|agent<br ALIGN="LEFT"/>retrievers : list[BaseComponent]<br ALIGN="LEFT"/>rewrite_pipeline<br ALIGN="LEFT"/>use_rewrite : bool<br ALIGN="LEFT"/>|ainvoke(message, conv_id: str, history: list): Document<br ALIGN="LEFT"/>get_info(): dict<br ALIGN="LEFT"/>get_pipeline(settings: dict, states: dict, retrievers: list \| None): BaseReasoning<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>prepare_citation(step_id, step, output, status): Document<br ALIGN="LEFT"/>stream(message, conv_id: str, history: list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.render.Render" [color="black", fontcolor="black", label=<{Render|<br ALIGN="LEFT"/>|collapsible(header, content, open: bool): str<br ALIGN="LEFT"/>collapsible_with_header(doc: RetrievedDocument, open_collapsible: bool): str<br ALIGN="LEFT"/>collapsible_with_header_score(doc: RetrievedDocument, override_text: str \| None, highlight_text: str \| None, open_collapsible: bool): str<br ALIGN="LEFT"/>highlight(text: str, elem_id: str \| None): str<br ALIGN="LEFT"/>image(url: str, text: str): str<br ALIGN="LEFT"/>preview(html_content: str, doc: RetrievedDocument, highlight_text: str \| None): str<br ALIGN="LEFT"/>table(text: str): str<br ALIGN="LEFT"/>table_preserve_linebreaks(text: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.chat.report.ReportIssue" [color="black", fontcolor="black", label=<{ReportIssue|correctness<br ALIGN="LEFT"/>issues<br ALIGN="LEFT"/>more_detail<br ALIGN="LEFT"/>report_btn<br ALIGN="LEFT"/>|on_building_ui()<br ALIGN="LEFT"/>report(correctness: str, issues: list[str], more_detail: str, conv_id: str, chat_history: list, settings: dict, user_id: Optional[int], info_panel: str, chat_state: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.rerankings.ui.RerankingManagement" [color="black", fontcolor="black", label=<{RerankingManagement|btn_close<br ALIGN="LEFT"/>btn_delete<br ALIGN="LEFT"/>btn_delete_no<br ALIGN="LEFT"/>btn_delete_yes<br ALIGN="LEFT"/>btn_edit_save<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>btn_test_connection<br ALIGN="LEFT"/>connection_logs<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>edit_default<br ALIGN="LEFT"/>edit_spec<br ALIGN="LEFT"/>edit_spec_desc<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>rerank_choices<br ALIGN="LEFT"/>rerank_list<br ALIGN="LEFT"/>selected_rerank_name<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>spec_desc<br ALIGN="LEFT"/>spec_desc_default : str<br ALIGN="LEFT"/>|check_connection(selected_rerank_name, selected_spec)<br ALIGN="LEFT"/>create_rerank(name, choices, spec, default)<br ALIGN="LEFT"/>delete_rerank(selected_rerank_name)<br ALIGN="LEFT"/>list_rerankings()<br ALIGN="LEFT"/>on_btn_delete_click()<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_rerank_vendor_change(vendor)<br ALIGN="LEFT"/>on_selected_rerank_change(selected_rerank_name)<br ALIGN="LEFT"/>save_rerank(selected_rerank_name, default, spec)<br ALIGN="LEFT"/>select_rerank(rerank_list, ev: gr.SelectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.rerankings.manager.RerankingManager" [color="black", fontcolor="black", label=<{RerankingManager|<br ALIGN="LEFT"/>|add(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>delete(name: str)<br ALIGN="LEFT"/>get(key: str, default: Optional[BaseReranking]): Optional[BaseReranking]<br ALIGN="LEFT"/>get_default(): BaseReranking<br ALIGN="LEFT"/>get_default_name(): str<br ALIGN="LEFT"/>get_random(): BaseReranking<br ALIGN="LEFT"/>get_random_name(): str<br ALIGN="LEFT"/>info(): dict<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>load_vendors()<br ALIGN="LEFT"/>options(): dict<br ALIGN="LEFT"/>settings(): dict<br ALIGN="LEFT"/>update(name: str, spec: dict, default: bool)<br ALIGN="LEFT"/>vendors(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.rerankings.db.RerankingTable" [color="black", fontcolor="black", label=<{RerankingTable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.pages.resources.ResourcesTab" [color="black", fontcolor="black", label=<{ResourcesTab|emb_management<br ALIGN="LEFT"/>emb_management_tab<br ALIGN="LEFT"/>index_management<br ALIGN="LEFT"/>index_management_tab<br ALIGN="LEFT"/>llm_management<br ALIGN="LEFT"/>llm_management_tab<br ALIGN="LEFT"/>rerank_management<br ALIGN="LEFT"/>rerank_management_tab<br ALIGN="LEFT"/>user_management<br ALIGN="LEFT"/>user_management_tab<br ALIGN="LEFT"/>|on_building_ui()<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>toggle_user_management(user_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.rewoo.RewooAgentPipeline" [color="black", fontcolor="black", label=<{RewooAgentPipeline|agent<br ALIGN="LEFT"/>enable_citation : bool<br ALIGN="LEFT"/>retrievers : list[BaseComponent]<br ALIGN="LEFT"/>rewrite_pipeline<br ALIGN="LEFT"/>use_rewrite : bool<br ALIGN="LEFT"/>|ainvoke(message, conv_id: str, history: list): Document<br ALIGN="LEFT"/>format_info_panel_evidence(worker_log)<br ALIGN="LEFT"/>format_info_panel_planner(planner_output)<br ALIGN="LEFT"/>get_info(): dict<br ALIGN="LEFT"/>get_pipeline(settings: dict, states: dict, retrievers: list \| None): BaseReasoning<br ALIGN="LEFT"/>get_user_settings(): dict<br ALIGN="LEFT"/>prepare_citation(answer): list[Document]<br ALIGN="LEFT"/>stream(message, conv_id: str, history: list): Generator[Document, None, Document] \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.react.RewriteQuestionPipeline" [color="black", fontcolor="black", label=<{RewriteQuestionPipeline|lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>rewrite_template : str<br ALIGN="LEFT"/>|run(question: str): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.rewoo.RewriteQuestionPipeline" [color="black", fontcolor="black", label=<{RewriteQuestionPipeline|lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>rewrite_template : str<br ALIGN="LEFT"/>|run(question: str): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.rewrite_question.RewriteQuestionPipeline" [color="black", fontcolor="black", label=<{RewriteQuestionPipeline|lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>rewrite_template : str<br ALIGN="LEFT"/>|run(question: str): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.settings.SettingGroup" [color="black", fontcolor="black", label=<{SettingGroup|application<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>reasoning<br ALIGN="LEFT"/>|flatten(): dict<br ALIGN="LEFT"/>get_setting_item(path: str): SettingItem<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.settings.SettingIndexGroup" [color="black", fontcolor="black", label=<{SettingIndexGroup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.settings.SettingIndexOption" [color="black", fontcolor="black", label=<{SettingIndexOption|indexing<br ALIGN="LEFT"/>retrieval<br ALIGN="LEFT"/>|flatten(): dict<br ALIGN="LEFT"/>get_setting_item(path: str): SettingItem<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.settings.SettingItem" [color="black", fontcolor="black", label=<{SettingItem|choices : list<br ALIGN="LEFT"/>component : str<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>special_type : str<br ALIGN="LEFT"/>value : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.settings.SettingReasoningGroup" [color="black", fontcolor="black", label=<{SettingReasoningGroup|<br ALIGN="LEFT"/>|finalize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.models.Settings" [color="black", fontcolor="black", label=<{Settings|setting<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.pages.settings.SettingsPage" [color="black", fontcolor="black", label=<{SettingsPage|current_name<br ALIGN="LEFT"/>password_change<br ALIGN="LEFT"/>password_change_btn<br ALIGN="LEFT"/>password_change_confirm<br ALIGN="LEFT"/>public_events : list<br ALIGN="LEFT"/>setting_save_btn<br ALIGN="LEFT"/>signout<br ALIGN="LEFT"/>|app_tab()<br ALIGN="LEFT"/>change_password(user_id, password, password_confirm)<br ALIGN="LEFT"/>change_reasoning_mode(value)<br ALIGN="LEFT"/>component_names()<br ALIGN="LEFT"/>components(): list<br ALIGN="LEFT"/>index_tab()<br ALIGN="LEFT"/>load_setting(user_id)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>reasoning_tab()<br ALIGN="LEFT"/>save_setting(user_id: int)<br ALIGN="LEFT"/>user_tab()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.pages.setup.SetupPage" [color="black", fontcolor="black", label=<{SetupPage|btn_finish<br ALIGN="LEFT"/>btn_skip<br ALIGN="LEFT"/>cohere_api_key<br ALIGN="LEFT"/>cohere_option<br ALIGN="LEFT"/>google_api_key<br ALIGN="LEFT"/>google_option<br ALIGN="LEFT"/>ollama_option<br ALIGN="LEFT"/>openai_api_key<br ALIGN="LEFT"/>openai_option<br ALIGN="LEFT"/>public_events : list<br ALIGN="LEFT"/>radio_model<br ALIGN="LEFT"/>setup_log<br ALIGN="LEFT"/>|on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>switch_options_view(radio_model_value)<br ALIGN="LEFT"/>update_default_settings(radio_model_value, default_settings)<br ALIGN="LEFT"/>update_model(cohere_api_key, openai_api_key, google_api_key, radio_model_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.decompose_question.SubQuery" [color="black", fontcolor="black", label=<{SubQuery|sub_query : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.suggest_conversation_name.SuggestConvNamePipeline" [color="black", fontcolor="black", label=<{SuggestConvNamePipeline|SUGGEST_NAME_PROMPT_TEMPLATE : str<br ALIGN="LEFT"/>lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>prompt_template : str<br ALIGN="LEFT"/>|run(chat_history: list[tuple[str, str]]): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.reasoning.prompt_optimization.suggest_followup_chat.SuggestFollowupQuesPipeline" [color="black", fontcolor="black", label=<{SuggestFollowupQuesPipeline|SUGGEST_QUESTIONS_PROMPT_TEMPLATE : str<br ALIGN="LEFT"/>extra_prompt : str<br ALIGN="LEFT"/>lang : str<br ALIGN="LEFT"/>llm<br ALIGN="LEFT"/>prompt_template : str<br ALIGN="LEFT"/>|run(chat_history: list[tuple[str, str]]): Document<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.models.User" [color="black", fontcolor="black", label=<{User|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"ktem.pages.resources.user.UserManagement" [color="black", fontcolor="black", label=<{UserManagement|admin_edit<br ALIGN="LEFT"/>btn_close<br ALIGN="LEFT"/>btn_delete<br ALIGN="LEFT"/>btn_delete_no<br ALIGN="LEFT"/>btn_delete_yes<br ALIGN="LEFT"/>btn_edit_save<br ALIGN="LEFT"/>btn_new<br ALIGN="LEFT"/>pwd_cnf_edit<br ALIGN="LEFT"/>pwd_cnf_new<br ALIGN="LEFT"/>pwd_edit<br ALIGN="LEFT"/>pwd_new<br ALIGN="LEFT"/>selected_user_id<br ALIGN="LEFT"/>state_user_list<br ALIGN="LEFT"/>user_list<br ALIGN="LEFT"/>usn_edit<br ALIGN="LEFT"/>usn_new<br ALIGN="LEFT"/>|create_user(usn, pwd, pwd_cnf)<br ALIGN="LEFT"/>delete_user(current_user, selected_user_id)<br ALIGN="LEFT"/>list_users(user_id)<br ALIGN="LEFT"/>on_btn_delete_click(selected_user_id)<br ALIGN="LEFT"/>on_building_ui()<br ALIGN="LEFT"/>on_register_events()<br ALIGN="LEFT"/>on_selected_user_change(selected_user_id)<br ALIGN="LEFT"/>on_subscribe_public_events()<br ALIGN="LEFT"/>save_user(selected_user_id, usn, pwd, pwd_cnf, admin)<br ALIGN="LEFT"/>select_user(user_list, ev: gr.SelectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.utils.file.YAMLNoDateSafeLoader" [color="black", fontcolor="black", label=<{YAMLNoDateSafeLoader|<br ALIGN="LEFT"/>|remove_implicit_resolver(tag_to_remove)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ktem.db.models.Conversation" -> "ktem.db.base_models.BaseConversation" [arrowhead="empty", arrowtail="none"];
"ktem.db.models.IssueReport" -> "ktem.db.base_models.BaseIssueReport" [arrowhead="empty", arrowtail="none"];
"ktem.db.models.Settings" -> "ktem.db.base_models.BaseSettings" [arrowhead="empty", arrowtail="none"];
"ktem.db.models.User" -> "ktem.db.base_models.BaseUser" [arrowhead="empty", arrowtail="none"];
"ktem.embeddings.db.BaseEmbeddingTable" -> "ktem.embeddings.db.Base" [arrowhead="empty", arrowtail="none"];
"ktem.embeddings.db.EmbeddingTable" -> "ktem.embeddings.db.BaseEmbeddingTable" [arrowhead="empty", arrowtail="none"];
"ktem.embeddings.ui.EmbeddingManagement" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.exceptions.HookAlreadyDeclared" -> "ktem.exceptions.KHException" [arrowhead="empty", arrowtail="none"];
"ktem.exceptions.HookNotDeclared" -> "ktem.exceptions.KHException" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.exceptions.FileExistsError" -> "ktem.exceptions.KHException" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.graph_index.GraphRAGIndex" -> "ktem.index.file.index.FileIndex" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.light_graph_index.LightRAGIndex" -> "ktem.index.file.graph.graph_index.GraphRAGIndex" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.lightrag_pipelines.LightRAGIndexingPipeline" -> "ktem.index.file.graph.pipelines.GraphRAGIndexingPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.lightrag_pipelines.LightRAGRetrieverPipeline" -> "ktem.index.file.base.BaseFileIndexRetriever" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.nano_graph_index.NanoGraphRAGIndex" -> "ktem.index.file.graph.graph_index.GraphRAGIndex" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.nano_pipelines.NanoGraphRAGIndexingPipeline" -> "ktem.index.file.graph.pipelines.GraphRAGIndexingPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.nano_pipelines.NanoGraphRAGRetrieverPipeline" -> "ktem.index.file.base.BaseFileIndexRetriever" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.pipelines.GraphRAGIndexingPipeline" -> "ktem.index.file.pipelines.IndexDocumentPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.graph.pipelines.GraphRAGRetrieverPipeline" -> "ktem.index.file.base.BaseFileIndexRetriever" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.index.FileIndex" -> "ktem.index.base.BaseIndex" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.knet.knet_index.KnowledgeNetworkFileIndex" -> "ktem.index.file.index.FileIndex" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.knet.pipelines.KnetIndexingPipeline" -> "ktem.index.file.pipelines.IndexDocumentPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.knet.pipelines.KnetRetrievalPipeline" -> "ktem.index.file.base.BaseFileIndexRetriever" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.pipelines.DocumentRetrievalPipeline" -> "ktem.index.file.base.BaseFileIndexRetriever" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.pipelines.IndexDocumentPipeline" -> "ktem.index.file.base.BaseFileIndexIndexing" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.ui.DirectoryUpload" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.ui.FileIndexPage" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.index.file.ui.FileSelector" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.index.ui.IndexManagement" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.llms.db.BaseLLMTable" -> "ktem.llms.db.Base" [arrowhead="empty", arrowtail="none"];
"ktem.llms.db.LLMTable" -> "ktem.llms.db.BaseLLMTable" [arrowhead="empty", arrowtail="none"];
"ktem.llms.ui.LLMManagement" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.main.App" -> "ktem.app.BaseApp" [arrowhead="empty", arrowtail="none"];
"ktem.pages.chat.ChatPage" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.chat.chat_panel.ChatPanel" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.chat.chat_suggestion.ChatSuggestion" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.chat.control.ConversationControl" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.chat.report.ReportIssue" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.login.LoginPage" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.resources.ResourcesTab" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.resources.user.UserManagement" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.settings.SettingsPage" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.pages.setup.SetupPage" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.prompt_optimization.decompose_question.DecomposeQuestionPipeline" -> "ktem.reasoning.prompt_optimization.rewrite_question.RewriteQuestionPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.prompt_optimization.fewshot_rewrite_question.FewshotRewriteQuestionPipeline" -> "ktem.reasoning.prompt_optimization.rewrite_question.RewriteQuestionPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.react.ReactAgentPipeline" -> "ktem.reasoning.base.BaseReasoning" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.rewoo.RewooAgentPipeline" -> "ktem.reasoning.base.BaseReasoning" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.simple.FullDecomposeQAPipeline" -> "ktem.reasoning.simple.FullQAPipeline" [arrowhead="empty", arrowtail="none"];
"ktem.reasoning.simple.FullQAPipeline" -> "ktem.reasoning.base.BaseReasoning" [arrowhead="empty", arrowtail="none"];
"ktem.rerankings.db.BaseRerankingTable" -> "ktem.rerankings.db.Base" [arrowhead="empty", arrowtail="none"];
"ktem.rerankings.db.RerankingTable" -> "ktem.rerankings.db.BaseRerankingTable" [arrowhead="empty", arrowtail="none"];
"ktem.rerankings.ui.RerankingManagement" -> "ktem.app.BasePage" [arrowhead="empty", arrowtail="none"];
"ktem.settings.SettingIndexGroup" -> "ktem.settings.BaseSettingGroup" [arrowhead="empty", arrowtail="none"];
"ktem.settings.SettingIndexOption" -> "ktem.settings.BaseSettingGroup" [arrowhead="empty", arrowtail="none"];
"ktem.settings.SettingReasoningGroup" -> "ktem.settings.BaseSettingGroup" [arrowhead="empty", arrowtail="none"];
"ktem.utils.plantuml.PlantUMLConnectionError" -> "ktem.utils.plantuml.PlantUMLError" [arrowhead="empty", arrowtail="none"];
"ktem.utils.plantuml.PlantUMLHTTPError" -> "ktem.utils.plantuml.PlantUMLConnectionError" [arrowhead="empty", arrowtail="none"];
"ktem.assets.theme.Kotaemon" -> "ktem.app.BaseApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_theme", style="solid"];
"ktem.embeddings.ui.EmbeddingManagement" -> "ktem.pages.resources.ResourcesTab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="emb_management", style="solid"];
"ktem.index.file.ui.File" -> "ktem.index.file.ui.FileIndexPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="files", style="solid"];
"ktem.index.file.ui.File" -> "ktem.pages.chat.ChatPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="quick_file_upload", style="solid"];
"ktem.index.file.ui.FileIndexPage" -> "ktem.index.file.index.FileIndex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_index_ui", style="solid"];
"ktem.index.file.ui.FileSelector" -> "ktem.index.file.index.FileIndex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_selector_ui", style="solid"];
"ktem.index.manager.IndexManager" -> "ktem.app.BaseApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="index_manager", style="solid"];
"ktem.index.manager.IndexManager" -> "ktem.index.ui.IndexManagement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
"ktem.index.ui.IndexManagement" -> "ktem.pages.resources.ResourcesTab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="index_management", style="solid"];
"ktem.llms.ui.LLMManagement" -> "ktem.pages.resources.ResourcesTab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="llm_management", style="solid"];
"ktem.pages.chat.ChatPage" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="chat_page", style="solid"];
"ktem.pages.chat.chat_panel.ChatPanel" -> "ktem.pages.chat.ChatPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="chat_panel", style="solid"];
"ktem.pages.chat.chat_suggestion.ChatSuggestion" -> "ktem.pages.chat.control.ConversationControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="chat_suggestion", style="solid"];
"ktem.pages.chat.control.ConversationControl" -> "ktem.pages.chat.ChatPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="chat_control", style="solid"];
"ktem.pages.chat.report.ReportIssue" -> "ktem.pages.chat.ChatPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="report_issue", style="solid"];
"ktem.pages.help.HelpPage" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="help_page", style="solid"];
"ktem.pages.login.LoginPage" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="login_page", style="solid"];
"ktem.pages.resources.ResourcesTab" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resources_page", style="solid"];
"ktem.pages.resources.user.UserManagement" -> "ktem.pages.resources.ResourcesTab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_management", style="solid"];
"ktem.pages.settings.SettingsPage" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="settings_page", style="solid"];
"ktem.pages.setup.SetupPage" -> "ktem.main.App" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="setup_page", style="solid"];
"ktem.reasoning.react.RewriteQuestionPipeline" -> "ktem.reasoning.react.ReactAgentPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rewrite_pipeline", style="solid"];
"ktem.reasoning.rewoo.RewriteQuestionPipeline" -> "ktem.reasoning.rewoo.RewooAgentPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rewrite_pipeline", style="solid"];
"ktem.reasoning.simple.AddQueryContextPipeline" -> "ktem.reasoning.simple.FullQAPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="add_query_context", style="solid"];
"ktem.rerankings.ui.RerankingManagement" -> "ktem.pages.resources.ResourcesTab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rerank_management", style="solid"];
"ktem.settings.BaseSettingGroup" -> "ktem.settings.SettingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"ktem.settings.BaseSettingGroup" -> "ktem.settings.SettingIndexOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="indexing", style="solid"];
"ktem.settings.BaseSettingGroup" -> "ktem.settings.SettingIndexOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="retrieval", style="solid"];
"ktem.settings.SettingGroup" -> "ktem.app.BaseApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_settings", style="solid"];
"ktem.settings.SettingIndexGroup" -> "ktem.settings.SettingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="index", style="solid"];
"ktem.settings.SettingReasoningGroup" -> "ktem.settings.SettingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reasoning", style="solid"];
"ktem.utils.visualize_cited.CreateCitationVizPipeline" -> "ktem.reasoning.simple.FullQAPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="create_citation_viz_pipeline", style="solid"];
"ktem.index.file.graph.lightrag_pipelines.LightRAGIndexingPipeline" -> "ktem.index.file.graph.light_graph_index.LightRAGIndex" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_indexing_pipeline_cls", style="solid"];
"ktem.index.file.graph.nano_pipelines.NanoGraphRAGIndexingPipeline" -> "ktem.index.file.graph.nano_graph_index.NanoGraphRAGIndex" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_indexing_pipeline_cls", style="solid"];
"ktem.index.file.graph.pipelines.GraphRAGIndexingPipeline" -> "ktem.index.file.graph.graph_index.GraphRAGIndex" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_indexing_pipeline_cls", style="solid"];
"ktem.index.file.knet.pipelines.KnetIndexingPipeline" -> "ktem.index.file.knet.knet_index.KnowledgeNetworkFileIndex" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_indexing_pipeline_cls", style="solid"];
"ktem.index.file.pipelines.IndexDocumentPipeline" -> "ktem.index.file.index.FileIndex" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_indexing_pipeline_cls", style="solid"];
}
